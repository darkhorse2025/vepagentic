/// <reference lib="webworker" />

import { clientsClaim } from "workbox-core"
import { ExpirationPlugin } from "workbox-expiration"
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching"
import { registerRoute } from "workbox-routing"
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from "workbox-strategies"
import { BackgroundSyncPlugin } from "workbox-background-sync"

declare const self: ServiceWorkerGlobalScope

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (fileExtensionRegexp.test(url.pathname)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL("/index.html"),
)

// Background sync for offline form submissions
const bgSyncPlugin = new BackgroundSyncPlugin("formQueue", {
  maxRetentionTime: 24 * 60, // Retry for max of 24 Hours (specified in minutes)
})

// Register route for API calls that should be synced when offline
registerRoute(
  ({ url }) => url.pathname.startsWith("/api/"),
  new NetworkFirst({
    plugins: [bgSyncPlugin],
  }),
  "POST",
)

// Cache images with a Cache First strategy
registerRoute(
  // Check to see if the request's destination is style for stylesheets, script for JavaScript, or image for images
  ({ request }) => request.destination === "image",
  // Use a Cache First caching strategy
  new CacheFirst({
    // Put all cached files in a cache named 'images'
    cacheName: "images",
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      {
        cacheWillUpdate: async ({ response }) => {
          return response && response.status === 200 ? response : null
        },
      },
      // Don't cache more than 50 items, and expire them after 30 days
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days
      }),
    ],
  }),
)

// Cache media files (audio, video) with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === "audio" || request.destination === "video",
  new CacheFirst({
    cacheName: "media",
    plugins: [
      {
        cacheWillUpdate: async ({ response }) => {
          return response && response.status === 200 ? response : null
        },
      },
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 14, // 14 Days
      }),
    ],
  }),
)

// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy
registerRoute(
  // Check to see if the request's destination is style for stylesheets, script for JavaScript, or worker for web worker
  ({ request }) =>
    request.destination === "style" || request.destination === "script" || request.destination === "worker",
  // Use a Stale While Revalidate caching strategy
  new StaleWhileRevalidate({
    // Put all cached files in a cache named 'assets'
    cacheName: "assets",
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      {
        cacheWillUpdate: async ({ response }) => {
          return response && response.status === 200 ? response : null
        },
      },
    ],
  }),
)

// Cache font files
registerRoute(
  ({ request }) => request.destination === "font",
  new CacheFirst({
    cacheName: "fonts",
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
      }),
    ],
  }),
)

// Handle push notifications
self.addEventListener("push", (event) => {
  if (event.data) {
    const data = event.data.json()
    const options = {
      body: data.body,
      icon: data.icon || "/icon.png",
      badge: "/badge.png",
      vibrate: [100, 50, 100],
      data: {
        dateOfArrival: Date.now(),
        primaryKey: data.id || "1",
        url: data.url || "/",
      },
      actions: data.actions || [
        { action: "explore", title: "View Details" },
        { action: "close", title: "Close" },
      ],
      tag: data.tag || "default",
      renotify: data.renotify || false,
      requireInteraction: data.requireInteraction || false,
      silent: data.silent || false,
    }
    event.waitUntil(self.registration.showNotification(data.title, options))
  }
})

// Handle notification click
self.addEventListener("notificationclick", (event) => {
  event.notification.close()

  // Handle notification action buttons if clicked
  if (event.action === "explore") {
    const urlToOpen = event.notification.data.url || "/"
    event.waitUntil(self.clients.openWindow(urlToOpen))
  }
  // If no action or 'close' action, just close the notification
})

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting()
  }
})

// Periodic background sync for content updates
// This requires the periodic-background-sync permission
self.addEventListener("periodicsync", (event: any) => {
  if (event.tag === "content-sync") {
    event.waitUntil(syncContent())
  }
})

async function syncContent() {
  // Fetch latest content updates
  try {
    const response = await fetch("/api/content-updates")
    if (response.ok) {
      const cache = await caches.open("content")
      await cache.put("/api/content-updates", response)

      // Notify the user about new content
      await self.registration.showNotification("New Content Available", {
        body: "New content has been downloaded and is ready for viewing.",
        icon: "/icon.png",
        badge: "/badge.png",
      })
    }
  } catch (error) {
    console.error("Background sync failed:", error)
  }
}

// Handle permission requests
self.addEventListener("message", async (event) => {
  if (event.data && event.data.type === "REQUEST_PERMISSION") {
    try {
      const permission = event.data.permission

      // Respond to the client with the result
      const allClients = await self.clients.matchAll()
      allClients.forEach((client) => {
        client.postMessage({
          type: "PERMISSION_RESPONSE",
          permission: permission,
          status: "requested",
        })
      })
    } catch (error) {
      console.error("Error handling permission request:", error)
    }
  }
})

